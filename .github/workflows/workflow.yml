name: Compilación, Pruebas y Análisis con SonarCloud

on:
  push:
    branches:
      - "main"
      - "feature/Integracion-Continua"
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build-and-analyze:
    name: Build, Test and Analyze Content Microservice
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 12345

    steps:
      # Clona el repositorio
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Para un análisis completo en SonarCloud

      # Configura Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
          cache: maven

      # Espera a que PostgreSQL esté listo
      - name: Wait for PostgreSQL to be ready
        run: |
          while ! pg_isready -h localhost -p 5432 -U postgres; do
            echo "Esperando a que PostgreSQL esté listo..."
            sleep 2
          done

      # Ejecutar scripts SQL para inicializar la base de datos del microservicio Content
      - name: Execute SQL script for Content database
        run: |
          export PGPASSWORD=12345
          psql -h localhost -U postgres -f Content.sql

      # Construir y probar solo el microservicio Content
      - name: Build and test Content microservice
        run: |
          cd Content
          mvn clean install
          mvn test

      # Análisis de SonarCloud para el microservicio Content
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run SonarCloud analysis for Content
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd User
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=samuelgoomez_proyecto24-ga01 \
            -Dsonar.organization=samuelgoomez \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # Mensaje final
      - name: Completion Message
        run: echo "El microservicio Content ha sido compilado, probado y analizado exitosamente con SonarCloud."