# Workflow de integración continua y análisis SonarQube
name: CI/CD and SonarQube Analysis

on:
  push:
    branches:
      - main
      - feature/Integracion-Continua
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 12345

    steps:
      # Clona el repositorio
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para SonarQube

      # Configura Java 8
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven

      # Configura PostgreSQL
      - name: Wait for PostgreSQL to be ready
        run: |
          while ! pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done

      # Ejecutar scripts SQL
      - name: Execute SQL scripts
        run: |
          export PGPASSWORD=12345
          psql -h localhost -U postgres -f User.sql
          psql -h localhost -U postgres -f Content.sql
          psql -h localhost -U postgres -f Visualization.sql

      # Construir y probar microservicios
      - name: Build and test Visualization microservice
        run: |
          cd Visualization
          mvn clean install
          mvn test
      - name: Build and test Content microservice
        run: |
          cd Content
          mvn clean install
          mvn test
      - name: Build and test User microservice
        run: |
          cd User
          mvn clean install
          mvn test

      # Ejecutar microservicios
      - name: Run Visualization microservice
        run: |
          cd Visualization
          mvn spring-boot:run &
      - name: Run Content microservice
        run: |
          cd Content
          mvn spring-boot:run &
      - name: Run User microservice
        run: |
          cd User
          mvn spring-boot:run &

      # Configurar Node.js y ejecutar pruebas Postman
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Install Newman
        run: npm install -g newman
      - name: Run Postman User tests
        run: newman run tests/User.postman_collection.json
      - name: Run Postman Content tests
        run: newman run tests/Content.postman_collection.json
      - name: Run Postman Visualization tests
        run: newman run tests/Visualization.postman_collection.json

      # Mensaje de éxito
      - name: Completion message
        run: echo "Todos los microservicios han sido compilados y probados exitosamente."

  sonar_analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=samuelgoomez_proyecto24-ga01

